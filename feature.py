import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', 
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', 
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64', 
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

%%time
# optimized datatypes for loading a dataframe from train/test.csv
dtypes = {
        'MachineIdentifier':                                    'object',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
}

train = pd.read_csv('train.csv', dtype=dtypes, low_memory=True)
test  = pd.read_csv('test.csv',  dtype=dtypes, low_memory=True)
# train = train.head(1000)
# test = test.head(1000)
# store a copy as feather file
#train.to_feather('train.ft')
#test.to_feather('test.ft')

# load train/test feather files
#train = feather.read_dataframe('train.ft')
#test = feather.read_dataframe('test.ft')

# store labels and unique machine ids for later use
target = train['HasDetections']
machine_id = test['MachineIdentifier']
train.drop(['MachineIdentifier', 'HasDetections'], inplace=True, axis=1)
test.drop(['MachineIdentifier'], inplace=True, axis=1)


# checking missing train data
total = train.isnull().sum().sort_values(ascending = False)
percent = (train.isnull().sum()/train.isnull().count()*100).sort_values(ascending = False)
missing_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])

print(missing_train_data.head(50))


# checking missing test data
total = test.isnull().sum().sort_values(ascending = False)
percent = (test.isnull().sum()/test.isnull().count()*100).sort_values(ascending = False)
missing_test_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])

print(missing_test_data.head(50))

train.drop(['PuaMode','Census_InternalBatteryType','Census_ProcessorClass','DefaultBrowsersIdentifier','Census_IsFlightingInternal'], axis = 1,inplace=True) # droping features with more than 80% empty values
test.drop(['PuaMode','Census_InternalBatteryType','Census_ProcessorClass','DefaultBrowsersIdentifier','Census_IsFlightingInternal'], axis = 1,inplace=True) # droping features with more than 80% empty values



# train['Date'] = train['AvSigVersion'].map(Av_datedict)
# test['Date'] = test['AvSigVersion'].map(Av_datedict)

day_1 = datetime(2018,1,1) 
week_dict = {}
for i in Av_datedict: 
    week_dict[i] = (Av_datedict[i]-day_1).days//7
train['WeekNo'] = train['AvSigVersion'].map(week_dict)
test['WeekNo'] = test['AvSigVersion'].map(week_dict)
train['WeekNo'].head()

#Smart Screen

train['SmartScreen'] = train['SmartScreen'].str.lower()
train['SmartScreen'].replace(
    {'promt': 'prompt', 
    'promprt': 'prompt',
    'enabled': 'on',
    'of': 'off',
    'deny': '0',
    '00000000': '0',
    'requiredadmin': 'requireadmin'},
     inplace=True)
train['SmartScreen'].replace({'0': np.nan}, inplace=True)
train['SmartScreen'] = train['SmartScreen'].astype('category')

test['SmartScreen'] = test['SmartScreen'].str.lower()
test['SmartScreen'].replace(
    {'promt': 'prompt', 
    'promprt': 'prompt',
    'enabled': 'on',
    'of': 'off',
    'deny': '0',
    '00000000': '0',
    'requiredadmin': 'requireadmin'},
     inplace=True)
test['SmartScreen'].replace({'0': np.nan}, inplace=True)
test['SmartScreen'] = test['SmartScreen'].astype('category')

def isnan(feature):
    return 1 if np.isnan(float(feature)) else 0

#Missing Numerals

train['Census_InternalPrimaryDisplayResolutionHorizontal'].replace({-1: np.nan}, inplace=True)
train['Census_InternalPrimaryDisplayResolutionVertical'].replace({-1: np.nan}, inplace=True)

# count -1 as a missing value for test
test['Census_InternalPrimaryDisplayResolutionHorizontal'].replace({-1: np.nan}, inplace=True)
test['Census_InternalPrimaryDisplayResolutionVertical'].replace({-1: np.nan}, inplace=True)

train['core_nan'] = train['Census_ProcessorCoreCount'].apply(isnan).astype('uint8')
train['ram_nan'] = train['Census_TotalPhysicalRAM'].apply(isnan).astype('uint8')
train['primary_nan'] = train['Census_PrimaryDiskTotalCapacity'].apply(isnan).astype('uint8')
train['system_nan'] = train['Census_SystemVolumeTotalCapacity'].apply(isnan).astype('uint8')

test['core_nan'] = test['Census_ProcessorCoreCount'].apply(isnan).astype('uint8')
test['ram_nan'] = test['Census_TotalPhysicalRAM'].apply(isnan).astype('uint8')
test['primary_nan'] = test['Census_PrimaryDiskTotalCapacity'].apply(isnan).astype('uint8')
test['system_nan'] = test['Census_SystemVolumeTotalCapacity'].apply(isnan).astype('uint8')

# impute some median values first
# median is may be more robust to outliers (if they exist)
# only use SimpleImputer for Diagonal, NumberOfCharges
imputer = SimpleImputer(strategy='median')

train['Census_InternalBatteryNumberOfCharges'] = imputer.fit_transform(train['Census_InternalBatteryNumberOfCharges'].values.reshape(-1,1))
test['Census_InternalBatteryNumberOfCharges'] = imputer.transform(test['Census_InternalBatteryNumberOfCharges'].values.reshape(-1,1))
train['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = imputer.fit_transform(train['Census_InternalPrimaryDiagonalDisplaySizeInInches'].values.reshape(-1,1))
test['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = imputer.transform(test['Census_InternalPrimaryDiagonalDisplaySizeInInches'].values.reshape(-1,1))
train['Census_ProcessorCoreCount'] = imputer.fit_transform(train['Census_ProcessorCoreCount'].values.reshape(-1,1))
test['Census_ProcessorCoreCount'] = imputer.transform(test['Census_ProcessorCoreCount'].values.reshape(-1,1))
train['Census_TotalPhysicalRAM'] = imputer.fit_transform(train['Census_TotalPhysicalRAM'].values.reshape(-1,1))
test['Census_TotalPhysicalRAM'] = imputer.transform(test['Census_TotalPhysicalRAM'].values.reshape(-1,1))
train['Census_PrimaryDiskTotalCapacity'] = imputer.fit_transform(train['Census_PrimaryDiskTotalCapacity'].values.reshape(-1,1))
test['Census_PrimaryDiskTotalCapacity'] = imputer.transform(test['Census_PrimaryDiskTotalCapacity'].values.reshape(-1,1))
train['Census_SystemVolumeTotalCapacity'] = imputer.fit_transform(train['Census_SystemVolumeTotalCapacity'].values.reshape(-1,1))
test['Census_SystemVolumeTotalCapacity'] = imputer.transform(test['Census_SystemVolumeTotalCapacity'].values.reshape(-1,1))
train['Census_InternalPrimaryDisplayResolutionHorizontal'] = imputer.fit_transform(train['Census_InternalPrimaryDisplayResolutionHorizontal'].values.reshape(-1,1))
test['Census_InternalPrimaryDisplayResolutionHorizontal'] = imputer.transform(test['Census_InternalPrimaryDisplayResolutionHorizontal'].values.reshape(-1,1))
train['Census_InternalPrimaryDisplayResolutionVertical'] = imputer.fit_transform(train['Census_InternalPrimaryDisplayResolutionVertical'].values.reshape(-1,1))
test['Census_InternalPrimaryDisplayResolutionVertical'] = imputer.transform(test['Census_InternalPrimaryDisplayResolutionVertical'].values.reshape(-1,1))
train['AVProductsEnabled'] = imputer.fit_transform(train['AVProductsEnabled'].values.reshape(-1,1))
test['AVProductsEnabled'] = imputer.transform(test['AVProductsEnabled'].values.reshape(-1,1))
train['AVProductsInstalled'] = imputer.fit_transform(train['AVProductsInstalled'].values.reshape(-1,1))
test['AVProductsInstalled'] = imputer.transform(test['AVProductsInstalled'].values.reshape(-1,1))

#remove categories 

numerical_categorical = [
'RtpStateBitfield', 'AVProductStatesIdentifier', 
'CityIdentifier' , 'OrganizationIdentifier','GeoNameIdentifier', 
'IeVerIdentifier', 'UacLuaenable', 'Census_OEMNameIdentifier', 
'Census_OEMModelIdentifier', 'Census_ProcessorManufacturerIdentifier', 
'Census_ProcessorModelIdentifier', 'Census_OSInstallLanguageIdentifier', 
'Census_FirmwareManufacturerIdentifier', 'Census_FirmwareVersionIdentifier', 
'Wdft_RegionIdentifier', 'LocaleEnglishNameIdentifier', 'OsBuild', 'OsSuite', 
'Census_OSBuildNumber', 'CountryIdentifier', 'Census_OSUILocaleIdentifier', 'Census_OSBuildRevision'
]
categorical = [
'ProductName', 'Platform', 'Processor', 'OsVer', 'OsPlatformSubRelease', 
'OsBuildLab', 'SkuEdition', 'SmartScreen', 'Census_MDC2FormFactor', 
'Census_DeviceFamily', 'Census_PrimaryDiskTypeName', 
'Census_ChassisTypeName', 'Census_PowerPlatformRoleName', 
'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSEdition', 'Census_OSSkuName', 
'Census_OSInstallTypeName', 'Census_OSWUAutoUpdateOptionsName', 'Census_GenuineStateName', 
'Census_ActivationChannel', 'Census_FlightRing', 
'AvSigVersion', 'AppVersion', 'EngineVersion', 'Census_OSVersion' 
]

#inspired by: https://www.kaggle.com/c/microsoft-malware-prediction/discussion/83946#490456
# values that occur in train but not test will not be useful for predicting test
for col in numerical_categorical:
    train.loc[~train[col].isin(test[col].unique()), col] = -1

for col in categorical:
    train[col] = train[col].cat.add_categories([-1])
    train.loc[~train[col].isin(test[col].unique()), col] = -1

def frequency_encoding(variable):
    t = pd.concat([train[variable], test[variable]]).value_counts().reset_index()
    t = t.reset_index()
    t.loc[t[variable] == 1, 'level_0'] = np.nan
    t.set_index('index', inplace=True)
    max_label = t['level_0'].max() + 1
    t.fillna(max_label, inplace=True)
    return t.to_dict()['level_0']

for col in tqdm(numerical_categorical):
    freq_enc_dict = frequency_encoding(col)
    train[col] = train[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')
    test[col] = test[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')
    
for col in tqdm(categorical):
    freq_enc_dict = frequency_encoding(col)
    train[col] = train[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')
    test[col] = test[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')



